
               STRING METHODLARI

1) toUpperCase() : i) Tum harfleri buyuk harfe cevirir.
                  ii) toUpperCase() method u String data return eder.

2) toLowerCase() : i) Tum harfleri kucuk harf yapar.
                   ii)toLowerCase() method u String data return eder.

3) charAt(0) : i) Datadaki ilk karakteri dondurur.
               ii) charAt(0) method u index ile calisir.

4) length() : i) Bir datadaki karakter sayisini bize verir
              ii) length() method u int bir deger dondurur

5) subString() : iki kullanimi vardir
                i) Baslangic ve bitis indexi verilirse (substring(baslangic indexi, bitis indexi)) baslangic indexi
                dahil bitis indexi haric yazdirir
                Metnin ortasindan data almamizi saglar
                ii) (baslangicIndexi) String in verilen indexten sonuna kadar alinmasini saglar
                Bu method String dondurur.

6) contains() :i) Bir String de belli bir characterin veya characterlerin var olup olmadigini
               anlamak icin kullanilir.
               ii) contains() methodu "boolean" return eder.

7) startsWith() : Metnin bas kisminin istenilen dizi(1 veya
                  daha fazla karakter) ile eslesip eslesmedigini
                  kontrol eder.Sonucu boolean dir


 8) endsWith () : Metnin belirli bir datayla bitip bitmedigini verir

               Bize boolean bir sonuc dondurur
               Tek karakterde, coklu karakterde kullanilabilir


 9)  replace () : Metnin içerisindeki belirli bir datanin yerine verilen diger datayi yerlestirir
                  String datayi dondurur
                  Tekli karakterler ile de coklu String karakterler ile de calisir
                  Her iki tarafta da "" ya da her iki tarafta da '' kullanilmalidir


 10) replaceAll () : Bir grup datayi degistirmek icin kullanilir.
                    Bir grup data'yi ifade edebilmek icin Regular Expression (Regex) kullanilir.


EN COK KULLANILAN REGEXLER:
                            1) Tum Rakamlar ==> [0-9]
                            2) Tum Kucuk Harfler ==> [a-z]
                            3) Tum Buyuk Harfler ==> [A-Z]
                            4) Tum Harfler ==> [a-zA-Z]
                            5) Tum Harfler ve Rakamlar ==> [a-zA-Z0-9]
                            6) Tum Noktalama Isaretleri ==> \\p{Punct}
                            7) Tum Sesli Harfler ==> [aeiouAEIOU]

                            ^ ==> den farkli, haricinde
                             1) Tum Rakamlar Haric ==> [^0-9]
                             2) Tum Kucuk Harfler Haric ==> [^a-z]
                             3) Tum Buyuk Harfler Haric==> [^A-Z]
                             4) Tum Harfler Haric==> [^a-zA-Z]
                             5) Tum Harfler ve Rakamlar Haric ==> [^a-zA-Z0-9]
                             6) Tum Noktalama Isaretleri Haric ==> \\p{Punct}
                             7) Tum Sesli Harfler Haric ==> [^aeiouAEIOU]

11) replaceFirst () : replace () ile ayni isi yapmakkla birlikte ilk gordugu datayi degistirir.

12) trim () : Bir String'de bastaki ve sondaki space karakterlerini siler, ortadaki
              space karakterlerine dokunmaz.

13) isEmpty () : String data'nin iceisinde hicbir sey yoksa True dondurur.
                 Java'da space'de bir karakter oldugu icin space varsa False dondurur.


14) isBlank () : ==>space+hiclik ise True dondurur.
                 String bir data'nin bos mu dolu mu olduguna bakar isEmpty'den farki space varsa
                 yine true dondurur.


15) indexOf () : Verilen karakter veya karakterlerin ilk gorunumunun indexini verir.
                 int deger dondurur.
                 Coklu data icin kullanildiginda ilk ngordugu data'nin ilk karakkterinin
                 index'ini verir.
                 Olmayan bir karakterin index'i sorulursa bize -1 dondurur.


16) lastIndexOf () : Verilen String bir data'da istenilen degerin son gorunumunun indexini verir.
                     Olmayan bir karakter sorgulanirsa -1 dondurur.

17) If Statement () : Bazen kodlarin calismasi belirli kosullara baglidir.
                      Mesela cok calisirsam java ogrenecegim. Java ogrenme eylemi
                      cok calisma eylemine baglanmistir.
                      1. eylem gercekklesmeden ikinci eylem gerceklesmez.
                      if() {}
                      () parantez icine sart yazilir. Eger True dondurulurse {} body arasindaki kod calisir
                      aksi halde if body disina cikar class'ta sonraki kodlari okumaya devam eder.


@channel Hatırlatma :bangbang:
Snippet msj atma-->mesaj yazma yerindeki + ya basınca search kısmına snippet yazın.
create a text snippet e tıklayın msjınızı yapıstırın entera basın ders esnasında
lıve channeldan paylasacagımız kodları bu sekılde paylasalım


********************************* NOT +++++++++++++++++++++++++++++++++++++++++++++++++++++++++

   Metot                            Açıklama                                                            Veri Dönüş Tipi
1.charAt()                  Belirtilen indexteki (konum) karakteri verir                                        char
2.codePointAt()             Belirtilen indexteki karakterin Unicode'unu verir                                   int
3.codePointBefore()         Belirtilen indexteki önceki karakterin Unicode'unu verir                           int
4.codePointCount()          Bu dizenin belirtilen metin aralığındaki Unicode'u döndürür                           int
5.compareTo()               İki dizeyi sözlükbilimsel olarak karşılaştırır                                      int
6.compareToIgnoreCase()     Büyük / küçük harf farklılıklarını göz ardı ederek iki dizgeyi
                            sözlükbilimsel olarak karşılaştırır                                              int
7.concat()                  Başka bir String'in sonuna bir karakter ekler                                       String
8.contains()                Bir dizenin bir dizi karakter içerip içermediğini kontrol eder                      boolean
9.contentEquals()           Bir dizenin belirtilen CharSequence veya StringBuffer ile aynı karakter dizisini
                            içerip içermediğini kontrol eder                                                 boolean
10.copyValueOf()            Karakter dizisinin karakterlerini temsil eden bir Dizi döndürür                      String
11.endsWith()               Bir dizenin belirtilen karakter (ler) ile bitip bitmediğini kontrol eder            boolean
12.equals()                 İki dizgiyi karşılaştırır. Dizeler eşitse doğru, değilse yanlış döndürür          boolean
13.equalsIgnoreCase()       Büyük / küçük harfe ilişkin hususları göz ardı ederek iki dizeyi karşılaştırır        boolean
14.format()                 Belirtilen yerel ayarı, biçim dizesini ve bağımsız değişkenleri kullanarak
                            biçimlendirilmiş bir dize döndürür                                                 String
15.getBytes()               Bu dizeyi adlandırılmış karakter kümesini kullanarak bir bayt dizisine kodlar,
                            sonucu yeni bir bayt dizisinde saklar                                               byte[]
16.getChars()               Karakterleri bir dizeden bir karakter dizisine kopyalar                             void
17.hashCode()               Bir dizenin karma kodunu verir                                                      int
18.indexOf()                Bir dizede belirtilen karakterlerin ilk bulunan oluşumunun konumunu verir          int
                            Olmayan bir karakterin index'i sorulursa bize -1 dondurur.
19.intern()                 Aramayı belirtilen dizinde başlatarak, belirtilen karakterin ilk oluşumunun
                            bu dizge içindeki dizini döndürür                                                   String
20.If Statement ()          Bazen kodlarin calismasi belirli kosullara baglidir. Mesela
                            cok calisirsam java ogrenecegim. Java ogrenme eylemi cok calisma eylemine baglanmistir.
                            1. eylem gercekklesmeden ikinci eylem gerceklesmez.if() {}() parantez icine sart yazilir.
                            Eger True dondurulurse {} body arasindaki kod calisir aksi halde if body disina cikar
                            class'ta sonraki kodlari okumaya devam eder
21.isEmpty()                String data'nin iceisinde hicbir sey yoksa True dondurur.
                            Java'da space'de bir karakter oldugu icin space varsa False dondurur.               boolean
22.isBlank ()               space+hiclik ise True dondurur.String bir data'nin bos mu dolu mu olduguna bakar
                            isEmpty'den farki space varsa yine true dondurur.                                   boolean
23.lastIndexOf()            Bir dizede belirtilen karakterlerin son bulunan oluşumunun konumunu verir          int
24.length()                 Belirtilen bir dizenin uzunluğunu verir                                                int
25.matches()                Normal bir ifadeye karşı bir eşleşme için bir dize arar ve eşleşmeleri döndürür   boolean
26.offsetByCodePoints()     CodePointOffset kod noktaları tarafından verilen dizinden uzak olan bu
                            Dize içindeki dizini döndürür                                                       int
27.regionMatches()          İki dizi bölgesinin eşit olup olmadığını test eder                                   boolean
28.replace()                Tekli karakterler ile de coklu String karakterler ile de calisir
                            Her iki tarafta da "" ya da her iki tarafta da '' kullanilma                        String
29.replaceFirst()           replace () ile ayni isi yapmakkla birlikte ilk gordugu datayi degistirir.           String
30.replaceAll()             Bir grup datayi degistirmek icin kullanilir.
                            Bir grup data'yi ifade edebilmek icin Regular Expression (Regex) kullanilir.        String
                            EN COK KULLANILAN REGEXLER:
                                                        1) Tum Rakamlar ==> [0-9]
                                                        2) Tum Kucuk Harfler ==> [a-z]
                                                        3) Tum Buyuk Harfler ==> [A-Z]
                                                        4) Tum Harfler ==> [a-zA-Z]
                                                        5) Tum Harfler ve Rakamlar ==> [a-zA-Z0-9]
                                                        6) Tum Noktalama Isaretleri ==> \\p{Punct}
                                                        7) Tum Sesli Harfler ==> [aeiouAEIOU]
                                                        ^ ==> den farkli, haricinde
                                                         1) Tum Rakamlar Haric ==> [^0-9]
                                                         2) Tum Kucuk Harfler Haric ==> [^a-z]
                                                         3) Tum Buyuk Harfler Haric==> [^A-Z]
                                                         4) Tum Harfler Haric==> [^a-zA-Z]
                                                         5) Tum Harfler ve Rakamlar Haric ==> [^a-zA-Z0-9]
                                                         6) Tum Noktalama Isaretleri Haric ==> \\p{Punct}
                                                         7) Tum Sesli Harfler Haric ==> [^aeiouAEIOU]
31.split()                  Bir dizeyi bir alt dizeye böler                                                        String[]
32.startsWith()             Bir dizenin belirtilen karakterlerle başlayıp başlamadığını kontrol eder         boolean
33.subSequence()            Bu dizinin bir alt dizisi olan yeni bir karakter dizisi verir                   CharSequence
34.substring()              Karakterleri bir dizeden, belirtilen bir başlangıç konumundan başlayarak
                            ve belirtilen karakter sayısıyla ayıklar                                         String
  2 farkli kullanimi vardir      1. a.substring(4,9);
                                    System.out.println("Rakip`i bul = " + a.substring(4,9));
                                  2. a.substring(10);
                                    System.out.println("a.s = " + a.substring(10));
35.toCharArray()            Bu dizeyi yeni bir karakter dizisine dönüştürür                                        char[]
36.toLowerCase()            Bir dizeyi küçük harflere dönüştürür                                                String
37.toString()               Bir String nesnesinin değerini verir                                               String
38.toUpperCase()            Bir dizeyi büyük harflere dönüştürür                                             String
39.trim()                   Bir dizenin her iki ucundaki boşluğu kaldırır                                       String
40.valueOf()                Bir String nesnesinin ilkel değerini verir                                         String
                            bize String olan bir datayi sayisal bir degere yani islem yapabilecegimiz